%dev.quarkus.http.port=8081

# Go bad to the first records, if it's out first access
kafka.auto.offset.reset=earliest

# Set the Kafka topic, as it's not the channel name
mp.messaging.incoming.requests.topic=a_quote_requests
mp.messaging.incoming.requests.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.requests.group.id=a_request_group


# Configure the outgoing `quotes` Kafka topic
mp.messaging.outgoing.quotes.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.quotes.topic=a_quotes

%dev.kafka.bootstrap.servers=${bootstrap.url}
%dev.mp.messaging.connector.smallrye-kafka.ssl.truststore.location=/tmp/client-truststore.jks
%dev.mp.messaging.connector.smallrye-kafka.ssl.truststore.password=kafka1
%dev.mp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL
%dev.mp.messaging.connector.smallrye-kafka.sasl.mechanism=SCRAM-SHA-512
%dev.mp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="processor" password=\"${processor.pwd}\";

quarkus.package.type=uber-jar
kafka.bootstrap.servers=my-cluster-kafka-bootstrap:9092
mp.messaging.connector.smallrye-kafka.security.protocol=SASL_PLAINTEXT
mp.messaging.connector.smallrye-kafka.sasl.mechanism=SCRAM-SHA-512
mp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="processor" password=\"${processor.pwd}\";

quarkus.ssl.native=true
quarkus.kubernetes-client.trust-certs=true
quarkus.openshift.env.vars.ab-jolokia-off=true
quarkus.openshift.env.configmaps=jaas-config
